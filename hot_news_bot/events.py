import logging
from typing import List, Dict, Any
from datetime import datetime, date
import requests
from bs4 import BeautifulSoup
from .database import add_event, get_today_events, clear_old_data

logger = logging.getLogger(__name__)

# –û–±–Ω–æ–≤–∏–º URL –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—è—Ö
CELEBRITY_EVENTS_URL = "https://www.imdb.com/calendar/"


def fetch_upcoming_events() -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—è–º–∏.
    """
    events = []
    try:
        response = requests.get(CELEBRITY_EVENTS_URL, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã IMDb –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–µ–º—å–µ—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤
        event_elements = soup.select('.ipc-metadata-list-item__content-container')

        for event in event_elements:
            try:
                date_elem = event.find_previous('h3')
                if date_elem:
                    date_str = date_elem.text.strip()
                    event_date = datetime.strptime(date_str, '%B %d').replace(year=datetime.now().year).date()

                    title = event.select_one('.ipc-metadata-list-item__list-content-item').text.strip()
                    stars = [star.text.strip() for star in event.select('.ipc-inline-list__item')]

                    events.append({
                        'name': f"–ü—Ä–µ–º—å–µ—Ä–∞: {title}",
                        'date': event_date,
                        'keywords': stars + [title, "–ø—Ä–µ–º—å–µ—Ä–∞", "—Ñ–∏–ª—å–º", "—Å–µ—Ä–∏–∞–ª"]
                    })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(events)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π —Å {CELEBRITY_EVENTS_URL}: {e}")

    return events


def update_events():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
    clear_old_data(days=30)  # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    new_events = fetch_upcoming_events()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for event in new_events:
        add_event(event['name'], event['date'], event['keywords'])

    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def get_relevant_events(article_content: str) -> List[Dict[str, Any]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏.
    """
    today_events = get_today_events()
    relevant_events = []

    for event in today_events:
        event_keywords = event[3].split(',')
        if any(keyword.lower() in article_content.lower() for keyword in event_keywords):
            relevant_events.append({
                'id': event[0],
                'name': event[1],
                'date': event[2],
                'keywords': event_keywords
            })

    return relevant_events


def generate_events_digest() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.
    """
    upcoming_events = fetch_upcoming_events()

    if not upcoming_events:
        return "–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –º–∏—Ä–µ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π."

    digest = "üé¨ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø—Ä–µ–º—å–µ—Ä—ã –∏ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π:\n\n"

    for i, event in enumerate(upcoming_events[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å–æ–±—ã—Ç–∏—è–º–∏
        digest += f"{i}. <b>{event['name']}</b>\n"
        digest += f"   üìÜ {event['date'].strftime('%d.%m.%Y')}\n"
        digest += f"   üåü –í —Ä–æ–ª—è—Ö: {', '.join(event['keywords'][:-3])}\n\n"

    digest += "\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≥—Ä–æ–º–∫–∏–µ –ø—Ä–µ–º—å–µ—Ä—ã! üçøüé•"

    return digest


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
    logging.basicConfig(level=logging.INFO)

    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
    update_events()

    print("\n–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    today_events = get_today_events()
    for event in today_events:
        print(f"- {event[1]} ({event[2]})")

    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π:")
    digest = generate_events_digest()
    print(digest)

    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ events.py –∑–∞–≤–µ—Ä—à–µ–Ω–æ")